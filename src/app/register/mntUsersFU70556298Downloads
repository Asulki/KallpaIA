"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { useRouter } from "next/navigation";
import { useState } from "react";
import Link from "next/link";
import { BotIcon, User, Mail, Lock, Eye, EyeOff, Calendar } from "lucide-react";
import {
  Select, SelectContent, SelectItem, SelectTrigger, SelectValue,
} from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";
import "../login/login-ui.css";

// Firebase
import { auth, db } from "@/lib/firebase";
import { createUserWithEmailAndPassword, sendEmailVerification, signOut } from "firebase/auth";
import { doc, runTransaction, serverTimestamp } from "firebase/firestore";

// ---------- Schemas ----------
const nicknameSchema = z
  .string()
  .min(4, { message: "El apodo debe tener al menos 4 caracteres." })
  .max(20, { message: "Máximo 20 caracteres." })
  .regex(/^[A-Za-z0-9_]+$/, { message: "Solo letras, números y guion bajo (_), sin espacios." });

const passwordSchema = z
  .string()
  .min(10, { message: "Mínimo 10 caracteres." })
  .regex(/[a-z]/, { message: "Incluye al menos una letra minúscula." })
  .regex(/[A-Z]/, { message: "Incluye al menos una letra mayúscula." })
  .regex(/\d/, { message: "Incluye al menos un número." })
  .regex(/[^A-Za-z0-9]/, { message: "Incluye al menos un carácter especial." })
  .refine((v) => !/\s/.test(v), { message: "La contraseña no puede contener espacios." });

const formSchema = z
  .object({
    nickname: nicknameSchema,
    email: z.string().email({ message: "Correo electrónico inválido." }),
    confirmEmail: z.string().email({ message: "Correo electrónico inválido." }),
    age: z
      .string()
      .refine((v) => {
        if (!v) return true; // opcional
        const n = Number(v);
        return Number.isInteger(n) && n >= 5 && n <= 90;
      }, { message: "Ingresa una edad real." })
      .optional(),
    password: passwordSchema,
    confirmPassword: z.string(),
  })
  .refine((data) => data.email === data.confirmEmail, {
    message: "Los correos no coinciden.",
    path: ["confirmEmail"],
  })
  .superRefine((data, ctx) => {
    const local = data.email.split("@")[0]?.toLowerCase?.() ?? "";
    const pw = data.password.toLowerCase();
    if (pw.includes(data.nickname.toLowerCase())) {
      ctx.addIssue({ path: ["password"], code: z.ZodIssueCode.custom, message: "La contraseña no debe contener tu apodo." });
    }
    if (local && pw.includes(local)) {
      ctx.addIssue({ path: ["password"], code: z.ZodIssueCode.custom, message: "La contraseña no debe contener tu correo." });
    }
    if (data.password !== data.confirmPassword) {
      ctx.addIssue({ path: ["confirmPassword"], code: z.ZodIssueCode.custom, message: "Las contraseñas no coinciden." });
    }
  });

// ---------- Utils ----------
function toLowerNick(n: string) { return n.trim().toLowerCase(); }

export default function RegisterPage() {
  const { toast } = useToast();
  const router = useRouter();
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirm, setShowConfirm] = useState(false);
  const [loading, setLoading] = useState(false);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      nickname: "",
      email: "",
      confirmEmail: "",
      age: undefined,
      password: "",
      confirmPassword: "",
    },
    mode: "onTouched",
  });

  const blockPasteHandlers = {
    onPaste: (e: React.ClipboardEvent) => e.preventDefault(),
    onDrop: (e: React.DragEvent) => e.preventDefault(),
  };

  async function validateNicknameUnique(nick: string) {
    const val = nick.trim();
    if (!val) return;
    if (!/^[A-Za-z0-9_]{4,20}$/.test(val)) {
      form.setError("nickname", { type: "manual", message: "Formato inválido (4–20, letras/números/_)." });
    } else {
      form.clearErrors("nickname");
    }
  }

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setLoading(true);
    try {
      // 1) Crear usuario en Auth
      const cred = await createUserWithEmailAndPassword(auth, values.email.trim(), values.password);
      const uid = cred.user.uid;
      const nicknameLower = toLowerNick(values.nickname);

      // 2) Transacción: asegurar apodo único + crear perfil
      await runTransaction(db, async (tx) => {
        const nickRef = doc(db, "nicknames", nicknameLower);
        const nickSnap = await tx.get(nickRef);
        if (nickSnap.exists()) {
          throw new Error("nickname_taken");
        }
        // Guardamos emailLogin para poder resolver por nickname en login/password
        tx.set(nickRef, { uid, emailLogin: cred.user.email });

        const userRef = doc(db, "users", uid);
        tx.set(userRef, {
          email: cred.user.email,
          nickname: values.nickname,
          nicknameLower,
          age: values.age ? Number(values.age) : null,
          createdAt: serverTimestamp(),
        });
      });

      // 3) Enviar verificación
      await sendEmailVerification(cred.user, {
        url: `${window.location.origin}/login?verify=1`,
        handleCodeInApp: false,
      });

      // 4) Cerrar sesión (obliga a verificar antes de entrar)
      await signOut(auth);

      // 5) Éxito + redirección
      toast({
        title: "¡Cuenta creada!",
        description: "Revisa tu correo y confirma tu cuenta para ingresar.",
      });
      router.push("/login?verify=1");
    } catch (err: any) {
      let msg = "No se pudo registrar.";
      if (err?.message === "nickname_taken") {
        msg = "Ese apodo ya está en uso. Elige otro.";
      } else if (String(err?.code).includes("auth/email-already-in-use")) {
        msg = "Ese correo ya está en uso.";
      } else if (String(err?.code).includes("auth/weak-password")) {
        msg = "Tu contraseña es muy débil.";
      }
      toast({ title: "Error", description: msg, variant: "destructive" });
    } finally {
      setLoading(false);
    }
  }

  // ⬇️ A partir de aquí estamos DENTRO del componente: el parser espera JSX
  return (
    <div className="app">
      <div className="login-card">
        <header className="flex justify-center mb-6">
          <div className="logo">
            <span className="badge">
              <BotIcon style={{ color: "var(--ink)" }} size={20} />
            </span>
            <span>KallpaIA</span>
          </div>
        </header>

        <h1 className="title">Crea tu Cuenta</h1>
        <p className="text-center text-sm text-muted-foreground -mt-4 mb-6">
          Completa tus datos para empezar.
        </p>

        <form onSubmit={form.handleSubmit(onSubmit)} noValidate>
          <div className="stack-16">

            {/* Nickname */}
            <div>
              <label htmlFor="nickname" className="label">Nickname</label>
              <div className="input-wrap">
                <span className="input-icon-left"><User size={18} /></span>
                <input
                  id="nickname"
                  className="input"
                  placeholder="Tu apodo"
                  autoComplete="username"
                  {...form.register("nickname", {
                    onBlur: (e) => validateNicknameUnique(e.target.value.trim()),
                  })}
                />
              </div>
              {form.formState.errors.nickname && <p className="error">{form.formState.errors.nickname.message}</p>}
            </div>

            {/* Email */}
            <div>
              <label htmlFor="email" className="label">Correo electrónico</label>
              <div className="input-wrap">
                <span className="input-icon-left"><Mail size={18} /></span>
                <input
                  id="email"
                  className="input"
                  type="email"
                  placeholder="tucorreo@ejemplo.com"
                  autoComplete="email"
                  inputMode="email"
                  {...form.register("email")}
                  {...blockPasteHandlers}
                />
              </div>
              {form.formState.errors.email && <p className="error">{form.formState.errors.email.message}</p>}
            </div>

            {/* Confirm Email */}
            <div>
              <label htmlFor="confirmEmail" className="label">Confirmar correo</label>
              <div className="input-wrap">
                <span className="input-icon-left"><Mail size={18} /></span>
                <input
                  id="confirmEmail"
                  className="input"
                  type="email"
                  placeholder="Repite tu correo"
                  autoComplete="off"
                  inputMode="email"
                  {...form.register("confirmEmail")}
                  {...blockPasteHandlers}
                />
              </div>
              {form.formState.errors.confirmEmail && <p className="error">{form.formState.errors.confirmEmail.message}</p>}
            </div>

            {/* Age (opcional) */}
            <div>
              <label htmlFor="age" className="label">
                Edad <span className="text-gray-400 text-sm">(opcional)</span>
              </label>
              <div className="input-wrap">
                <span className="input-icon-left"><Calendar size={18} /></span>
                <Select
                  onValueChange={(value) => form.setValue("age", value as any, { shouldValidate: true })}
                  defaultValue={form.getValues("age")}
                >
                  <SelectTrigger className="input !px-11" id="age">
                    <SelectValue placeholder="Selecciona tu edad (opcional)" />
                  </SelectTrigger>
                  <SelectContent>
                    {Array.from({ length: 90 - 5 + 1 }, (_, i) => (i + 5).toString()).map((y) => (
                      <SelectItem key={y} value={y}>{y}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              {form.formState.errors.age && <p className="error">{form.formState.errors.age.message}</p>}
            </div>

            {/* Password */}
            <div>
              <label htmlFor="password" aria-label="Contraseña" className="label">Contraseña</label>
              <div className="input-wrap">
                <span className="input-icon-left"><Lock size={18} /></span>
                <input
                  id="password"
                  className="input"
                  type={showPassword ? "text" : "password"}
                  placeholder="••••••••"
                  autoComplete="new-password"
                  {...form.register("password")}
                  {...blockPasteHandlers}
                />
                <button type="button" className="input-icon-right" onClick={() => setShowPassword(s => !s)}>
                  {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}
                </button>
              </div>
              {form.formState.errors.password
                ? <p className="error">{form.formState.errors.password.message}</p>
                : <p className="help">Mín. 10 caracteres con Aa, 0-9 y símbolo.</p>
              }
            </div>

            {/* Confirm Password */}
            <div>
              <label htmlFor="confirmPassword" aria-label="Confirmar contraseña" className="label">Confirmar contraseña</label>
              <div className="input-wrap">
                <span className="input-icon-left"><Lock size={18} /></span>
                <input
                  id="confirmPassword"
                  className="input"
                  type={showConfirm ? "text" : "password"}
                  placeholder="••••••••"
                  autoComplete="new-password"
                  {...form.register("confirmPassword")}
                  {...blockPasteHandlers}
                />
                <button type="button" className="input-icon-right" onClick={() => setShowConfirm(s => !s)}>
                  {showConfirm ? <EyeOff size={18} /> : <Eye size={18} />}
                </button>
              </div>
              {form.formState.errors.confirmPassword && <p className="error">{form.formState.errors.confirmPassword.message}</p>}
            </div>

            <div className="pt-2">
              <button type="submit" className="btn btn-primary" disabled={loading}>
                {loading ? "Creando..." : "Crear cuenta"}
              </button>
            </div>
          </div>
        </form>

        <p className="form-footer">
          ¿Ya tienes cuenta?{" "}
          <Link href="/login" className="link">Inicia sesión</Link>
        </p>
      </div>
    </div>
  );
}
